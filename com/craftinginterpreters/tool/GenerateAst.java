package com.craftinginterpreters.tool;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;


public class GenerateAst {
    static final String tab = "    ";

    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.out.println("Usage: generate_ast <output directory>");
            System.exit(64);
        }

        String outputDir = args[0];

        // Expr.java
        defineAst(
            outputDir,
            "Expr", 
            Arrays.asList(
                "Assign     : Token name, Expr value",
                "Binary     : Expr left, Token operator, Expr right",
                "Grouping   : Expr expression",
                "Literal    : Object value",
                "Logical    : Expr left, Token operator, Expr right",
                "Variable   : Token name",
                "Unary      : Token operator, Expr right"
            )
        );

        // Stmt.java
        defineAst(
            outputDir,
            "Stmt", 
            Arrays.asList(
                // ClassName: FieldType fieldName
                "Block      : List<Stmt> statements",
                "If         : Expr condition, Stmt thenBranch, Stmt elseBranch",
                "Expression : Expr expression",
                "Print      : Expr expression",
                "While      : Expr condition, Stmt body",
                "Var        : Token name, Expr initializer"
            )
        );
    }

    private static void defineAst(String outputDir, String baseName, List<String> types) throws IOException {
        String path = outputDir + "/" + baseName +".java";
        PrintWriter writer = new PrintWriter(path, "UTF-8");

        writer.println("// file auto-generated by 'com.craftinginterpreters.tool.GenerateAst'.");
        writer.println("package com.craftinginterpreters.lox;");
        writer.println();
        writer.println("import java.util.List;");
        writer.println();
        writer.println("abstract class " + baseName + " {");
        
        // visitor interface
        defineVisitor(writer, baseName, types);
        
        // add "accept()" method
        writer.println(tab + "abstract <R> R accept(Visitor<R> visitor);");
        writer.println();

        // The AST nodes classes
        for (String type: types) {
            String className = type.split(":")[0].trim();
            String fields = type.split(":")[1].trim();
            defineType(writer, baseName, className, fields);
        }
        
        writer.println("}");
        writer.close();
    }

    private static void defineType(PrintWriter writer, String baseName, String className, String fieldList) throws IOException {
        String tab = "    ";
        writer.println(tab + "static class " + className + " extends " + baseName + " {");
        // attributes
        String[] fields = fieldList.split(", "); // item contains "{type} {attribute name}"
        for (String field: fields) {
            writer.println(tab + tab + "final " + field +";");
        }
        writer.println();
        // Constructor
        writer.println(tab + tab + className + "(" + fieldList +") {");
        for (String field: fields) {
            String name = field.split(" ")[1];
            writer.println(tab + tab + tab + "this." + name + " = " + name + ";");
        }
        writer.println(tab + tab + "}");
        writer.println();

        writer.println(tab + tab + "@Override");
        writer.println(tab + tab + "<R> R accept(Visitor<R> visitor) {");
        writer.println(tab + tab + tab + "return visitor.visit" + className + baseName + "(this);");
        writer.println(tab + tab + "}");
        writer.println();
        
        writer.println(tab + "}");
        writer.println();
    }

    private static void defineVisitor(PrintWriter writer, String baseName, List<String> types) throws IOException {
        writer.println(tab + "interface Visitor<R> {");

        for (String type: types) {
            String typeName = type.split(":")[0].trim();
            writer.println(tab + tab + "R visit" + typeName + baseName + "(" +
                    typeName + " " + baseName.toLowerCase() + ");");
        }
        writer.println(tab + "}");
        writer.println();
    }
}
